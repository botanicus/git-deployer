#!/usr/bin/env nake

# TODO: what about a console support as capistrano has? Would be so helpful! Or at least ./tasks.rb deployer:ssh which starts ssh session for a server and cd to application path.
# TODO: run a command on all/given servers, like if you forget to create tmp in your clone hook

require "nake/template"

# === Helpers === #

# TODO: put it to nake
class Nake::Task
  def run_from_task(task, *args)
    self.call(*args)
  rescue SystemExit => exception
    Kernel.abort "Exception during task #{task}: #{exception.message}. Please re-run the task.\n#{exception.backtrace.join("\n- ")}"
  rescue Exception => exception
    abort "Exception during task #{task}: #{exception.message}. Please re-run the task.\n#{exception.backtrace.join("\n- ")}"
  end
end

module SshMixin
  def ssh(server, command)
    sh "ssh %{user}@%{host} '#{command}'" % server
  end

  def servers(*names, &block)
    names.map! { |name| name.to_sym }
    config = Task["deployer:setup"].config

    if ! config.has_key?(:servers) || config[:servers].empty?
      abort "You have to configure servers. Read documentation online at http://github.com/botanicus/git-deployer"
    end

    names = config[:servers].keys if names.empty?
    names.each do |name|
      server = config[:servers][name]
      raise "There isn't any server named #{name}. Please specify one of #{config[:servers].keys} or add #{name} to your configuration." if server.nil?

      [:user, :host, :repo, :path].each do |key|
        unless server.has_key?(key)
          abort "Server #{name} doesn't have key #{key}, you have to provide it!"
        end
      end

      info "Server #{name} #{server.inspect}"
      block.call(name, server)
    end
  end
end

# === Tasks === #

# @settings
#   Task["deployer:install"].config[:executable] = true
# @options
#   --[no-]force       Overwrite local hooks. Default is false.
#   --[no-]executable  Install hooks as executable scripts, so you can use whichever interpret,
#                      but you can't access to shell functions from post-receive.
Task.new("deployer:install") do |task|
  task.description = "Install clone and update hooks to the project."

  # path to the given hook
  task.define_singleton_method(:path) do |name, options|
    basename = options[:executable] ? "#{name}.exec.erb" : "#{name}.source.erb"
    File.join(File.dirname(__FILE__), "..", "hooks", "project", basename)
  end

  # install given hook from its template
  task.define_singleton_method(:install) do |source, target, options|
    mkdir_p File.dirname(target)
    note "Creating #{target} from #{source}"
    if ! File.exist?(target) || options[:force]
      erb source, target, options: options
      sh "chmod +x #{target}" if options[:executable]
    else
      abort "File #{target} already exist. Run this hook with --force to override the file."
    end
  end

  task.define do |options|
    self.install(self.path("clone", options),  "hooks/clone", options)
    self.install(self.path("update", options), "hooks/update", options)
  end
end

# @settings
#   Task["deployer:setup"].config[:servers] = {
#     server1: {
#       user: "www",
#       host: "127.0.0.1",
#       repo: "/var/sources/deploy-test.git",
#       path: "/var/www/deploy-test"
#     }
#   }
# @options
#   --[no-]force  Overwrite remote repository and application path. Default is false.
#   Also, this tasks takes the same arguments as deployer:remote:copy_hook.
# @see Task["deployer:remote:copy_hook"] for configuring generation of the post-receive hook.
Task.new("deployer:setup") do |task|
  task.description = "Install Git hooks on remote server"
  task.extend(SshMixin)

  task.define do |options|
    servers do |name, server|
      if options[:force]
        ssh server, "test -d %{path} && rm -rf %{path}; test -d %{repo} && rm -rf %{repo}"
      end

      unless ssh server, "test -d %{path}"
        ssh server, "mkdir -p %{path}" || abort("Creating of some necessary directories failed.")
      else
        abort "Path %{path} already exist. Try to run with --force if you want to overwrite it." % server
      end

      unless ssh server, "test -d %{repo}"
        ssh server, "mkdir -p %{repo}" || abort("Creating of some necessary directories failed.")
        ssh server, "cd %{repo} && git init --bare" || abort("There was a problems during attempt to create a bare repository.")
        sh "git remote add #{name} %{user}@%{host}:%{repo}" % server
      else
        abort "Repository %{repo} already exist. Try to run with --force if you want to overwrite it." % server
      end

      info "Setup at server #{name} finished"
    end

    # copy post-receive hooks
    Task["s"].run_from_task("deployer:setup", [], options)
  end
end

# @options
#   This tasks takes the same arguments as deployer:compile_hook.
# @see Task["deployer:compile_hook"] for configuring generation of the post-receive hook.
Task.new("deployer:remote:copy_hook") do |task|
  task.description = "Copy Git hook to remote server"
  task.extend(SshMixin)

  # TODO: change gemspec to require Ruby 1.9
  task.define_singleton_method(:template) do |path|
    path.end_with?(".erb") ? path : compile_template(path)
  end

  # Template precedence:
  #   1) hooks/post-receive.server_name
  #   2) hooks/post-receive.server_name.erb
  #   3) hooks/post-receive
  #   3) hooks/post-receive.erb
  #   5) the default template distributed with git-deployer
  task.define_singleton_method(:find_template) do |name|
    ["hooks/post-receive.#{name}", "hooks/post-receive"].find do |template|
      File.exist?(template)
    end
  end

  # @return [String] path to the post-receive hook which was generated
  task.define_singleton_method(:compile_template) do |name|
    path = ["hooks/post-receive.#{name}.erb", "hooks/post-receive.erb"].find do |template|
      if File.exist?(template)
        info "Compiling template #{template}"
        Task["deployer:compile_hook"].call(template, name, options)
      end
    end
    path.sub(/\.erb$/, "") if path
  end

  task.define_singleton_method(:upload) do |server, local_path|
    sh "scp #{local_path} %{user}@%{host}:%{repo}/hooks/post-receive" % server
    ssh server, "chmod +x %{repo}/hooks/post-receive"
  end

  task.define do |*names, options|
    servers(*names) do |name, server|
      # generate the hook if it doesn't exist
      if local_path = self.find_template(name)
        info "Using hook #{local_path}"
        self.upload(server, local_path)
      elsif local_path = self.compile_template(name)
        self.upload(server, local_path)
        sh "rm #{local_path}"
      else
        template = File.join(File.dirname(__FILE__), "..", "hooks", "server", "post-receive.erb")
        info "Generating hook from default post-receive template"
        Task["deployer:compile_hook"].call([template, name], options)
        local_path = "hooks/post-receive.#{name}"
        self.upload(server, local_path)
        sh "rm #{local_path}"
      end
    end
  end
end

# TODO: Task["deployer:compile_hook"].config[:colors] is fine, but there should be also server-specific configuration in Task["deployer:setup"].config[:servers][:origin][:colors]

# @example
#   ./tasks.rb deployer:compile_hook hooks/post-receive.erb --colors
# @settings
#   Task["deployer:compile_hook"].config[:colors]  = false
#   Task["deployer:compile_hook"].config[:debug]   = true
#   Task["deployer:compile_hook"].config[:branch]  = "master"
#   Task["deployer:compile_hook"].config[:shebang] = "#!/usr/bin/env ruby"
#   Task["deployer:compile_hook"].config[:target]  = "$BRANCH"
# @options
#   --[no-]force            Overwrite local post-receive hook. Default is keep it.
#   --[no-]colors           Do not use colors in the hook. Some servers might have problems with them.
#   --[no-]debug            Print debug messages from the post-receive hook.
#   --branch=deploy         Deploy just this specified branch. Default is deploy all of them.
#   --shebang='#!/bin/zsh'  Use this shebang in the post-receive hook.
#   --target='$BRANCH'      Relative path from the apps root to the application. So if we have apps root in /var/www/myapp and we
#                           specify target to '$BRANCH', then each branch will be located in directory with same name as the branch,
#                           i. e. /var/www/myapp/master. Empty target means put everything directly into the apps root. It's reasonable
#                           just if you specify also the --branch=mybranch switch, otherwise the code will be reset in each push to the
#                           different branch which isn't probably what you want. But if you deploy just one branch, then it's OK.
Task.new("deployer:compile_hook") do |task|
  task.description = "Copy Git hook locally, so you can edit it and at the next remote copy it will be used instead of the hook distributed with git-deployer."
  task.extend(SshMixin)

  # default configuration
  task.config[:shebang] = "#!/bin/sh"
  task.config[:debug]   = true
  task.config[:colors]  = true
  task.config[:branch]  = nil
  task.config[:target]  = "$BRANCH"

  # We have to generate one hook for each server configuration because we have to specify local paths
  task.define do |source = nil, server_name = nil, options|
    abort "[#1] You have to specify the template you want to compile!" if source.nil?
    abort "[#2] You have to specify the the server_name!" if server_name.nil?
    abort "First argument has to be a template with .erb extension!" unless source.end_with?(".erb")
    server = Task["deployer:setup"].config[:servers][server_name]
    target = "hooks/post-receive.#{server_name}"
    if ! File.exist?(target) || options[:force]
      info "Creating #{target} from template #{source}"
      erb source, target, {repo: server[:repo], path: server[:path]}.merge(config).merge(options)
    else
      abort "File #{target} already exist. Run this task with --force option to override."
    end
  end
end

Task.new("deployer:copy_hook") do |task|
  task.description = "Copy Git hook locally, so you can edit it and at the next remote copy it will be used instead of the hook distributed with git-deployer."

  task.define do |target = "hooks/post-receive", options|
    source = File.join(File.dirname(__FILE__), "..", "hooks", "server", "post-receive.erb")
    if ! File.exist?(target) || options[:force]
      cp source, target
    else
      abort "File #{target} already exist. Run this task with --force option to override."
    end
  end
end

Task.new("deployer:run") do |task|
  task.description = "Run remote hook"
  task.extend(SshMixin)

  # STDIN for post-receive:
  # SHA1 SHA1 refs/heads/master
  task.define do
    servers do |name, server|
      head = `git rev-parse HEAD`
      refs = `cat .git/HEAD | awk '{ print $2 }'`
      ssh server, "cd %{path} && echo #{head} #{head} #{refs} | ./hooks/post-receive"
    end
  end
end

# ./tasks.rb deployer:remove
# ./tasks.rb deployer:remove server1 server2
Task.new("deployer:remove") do |task|
  task.description = "Remove created directory for remote servers"
  task.config = Task["deployer:setup"].config
  task.extend(SshMixin)

  task.define do |*names, options|
    servers(names) do |name, server|
      ssh "rm -rf %{path}; rm -rf %repo"
    end
  end
end
